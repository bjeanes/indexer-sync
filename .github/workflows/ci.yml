name: CI
on:
  push:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: stable
          profile: default
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-
            ${{ runner.os }}-cargo-build-target-

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: stable
          profile: default
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ steps.rust-toolchain.outputs.rustc_hash }}-
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-${{ steps.rust-toolchain.outputs.rustc_hash }}-
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-
            ${{ runner.os }}-cargo-build-target-

      - name: Check rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Check clippy warnings
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D clippy::all

  build:
    needs: test
    name: Build release assets
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - { os: ubuntu-18.04, toolchain: stable, target: x86_64-unknown-linux-gnu, cross: false }
          - { os: ubuntu-18.04, toolchain: stable, target: aarch64-unknown-linux-gnu, cross: true }
          - { os: ubuntu-18.04, toolchain: stable, target: x86_64-unknown-linux-musl, cross: true }
          - { os: ubuntu-18.04, toolchain: stable, target: arm-unknown-linux-gnueabi, cross: true }
          - { os: ubuntu-18.04, toolchain: stable, target: armv7-unknown-linux-gnueabihf, cross: true }

          # Macos
          - { os: macos-10.15, toolchain: stable, target: x86_64-apple-darwin, cross: false }
          - { os: macos-10.15, toolchain: stable, target: x86_64-apple-darwin, cross: false }

          # Windows
          - { os: windows-2019, toolchain: stable-x86_64-pc-windows-gnu, target: x86_64-pc-windows-gnu, cross: false }
          - { os: windows-2019, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc, cross: false }

    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: ${{ matrix.config.toolchain }}
          target: ${{ matrix.config.target }}
          profile: minimal
          override: true
          default: true

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.config.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ matrix.config.target}}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.config.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ matrix.config.target}}-
            ${{ matrix.config.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.config.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-
            ${{ matrix.config.os }}-cargo-build-target-
            ${{ runner.os }}-cargo-build-target-

      - name: Downgrade cross (for OpenSSL support)
        uses: actions-rs/cargo@v1
        if: ${{ matrix.config.cross }}
        with:
          command: install
          args: --version 0.1.16 cross

      - name: Build release asset
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.config.cross }}
          command: build
          args: --release --target ${{ matrix.config.target }}

      - name: Package asset as gzip
        if: "!startsWith(matrix.config.os, 'windows')"
        run: env GZIP=-9 tar zvcf indexer-sync.tar.gz -C ./target/${{ matrix.config.target }}/release indexer-sync

      - name: Package asset as zip
        if: startsWith(matrix.config.os, 'windows')
        run: |
          Compress-Archive -LiteralPath .\target\${{ matrix.config.target }}\release\indexer-sync.exe -DestinationPath indexer-sync.zip

      - name: Upload gzipped artifact
        if: "!startsWith(matrix.config.os, 'windows')"
        uses: actions/upload-artifact@v2
        with:
          name: indexer-sync-${{ matrix.config.target }}.tar.gz
          path: indexer-sync.tar.gz

      - name: Upload zipped artifact
        if: startsWith(matrix.config.os, 'windows')
        uses: actions/upload-artifact@v2
        with:
          name: indexer-sync-${{ matrix.config.target }}.zip
          path: indexer-sync.zip

  # TODO: skip if ${{ github.sha }} can be `git describe`d as an exact version
  #       tag (we'll release that separately)
  prerelease:
    name: Create a pre-release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download built assets from workflow artifacts
        uses: actions/download-artifact@v2
        with:
          path: assets/

      - name: Set release version variable
        id: version
        run: |
          echo ::set-output name=version::`git describe --long --always --tags --exclude unstable`

      # This generates a space-sparated list of `$asset_name:assets/$file_name/$file_name`
      # strings by modifying the file_name to include the release version set
      # above.
      #
      # The `actions/download-artifact` action puts each artifact in its own
      # directory, even when it is a single file.
      - name: Build list of artifacts
        id: artifacts
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          files=$(ls -1 assets | perl -Wpe 's/^(indexer-sync)-(.*)$/$1-unstable-'$VERSION'-$2:assets\/$&\/*/g')
          echo ::set-output name=files::`echo $files | xargs echo`

      # Deleting the release and tag to work around some downsides of the
      # meeDamian/github-release approach:
      #
      # 1. Tag is left pointing to the original release
      # 2. Release is updated but its timestamp will be the time of original release
      #
      # Simply deleting the tag (e.g. `git push --delete origin unstable`) will
      # work from a public-facing standpoint, but it leaves behind a lot of
      # draft releases for the releases which were associated with the tag at
      # the time it was deleted.
      - name: Delete `unstable` tag and associated GH Release
        uses: dev-drprasad/delete-tag-and-release@v0.1.2
        with:
          delete_release: true
          tag_name: unstable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Extract latest changelog entry
      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1.1.0

      # Upserts the pre-release
      - name: Create GH Release and `unstable` tag for current commit
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allow_override: true
          prerelease: true
          tag: unstable
          commitish: ${{ github.sha }}
          name: "Unstable (built from master)"
          body: ${{ steps.changelog_reader.outputs.log_entry }}
          files: ${{ steps.artifacts.outputs.files }}
          gzip: false
